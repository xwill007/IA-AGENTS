#!/bin/bash

# Script de inicio para IA-AGENTS Trading Bot
# Este script configura e inicia todo el sistema Docker

echo "ü§ñ IA-AGENTS Trading Bot - Inicio del Sistema"
echo "==============================================="

# Verificar si Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "‚ùå Error: Docker no est√° instalado"
    echo "   Por favor instala Docker Desktop desde: https://www.docker.com/products/docker-desktop"
    exit 1
fi

# Verificar si Docker est√° corriendo
if ! docker info &> /dev/null; then
    echo "‚ùå Error: Docker no est√° corriendo"
    echo "   Por favor inicia Docker Desktop"
    exit 1
fi

echo "‚úÖ Docker est√° corriendo"

# Verificar si docker-compose est√° disponible
if ! command -v docker-compose &> /dev/null; then
    echo "‚ö†Ô∏è docker-compose no encontrado, usando 'docker compose'"
    COMPOSE_CMD="docker compose"
else
    COMPOSE_CMD="docker-compose"
fi

# Crear archivo .env si no existe
if [ ! -f .env ]; then
    echo "üìù Creando archivo .env desde template..."
    cp env.example .env
    echo "‚úÖ Archivo .env creado. Por favor configura tus API keys de Binance si deseas trading real."
fi

# Crear directorios necesarios
echo "üìÅ Creando directorios necesarios..."
mkdir -p data models logs notebooks grafana/dashboards grafana/datasources prometheus

# Crear archivo de configuraci√≥n de Prometheus
echo "üìä Configurando Prometheus..."
mkdir -p prometheus
cat > prometheus/prometheus.yml << 'EOL'
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  # - "first_rules.yml"

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'ia-agents-api'
    static_configs:
      - targets: ['api:8000']
    metrics_path: '/metrics'
    scrape_interval: 30s

  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres:5432']

  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']
EOL

# Configurar Grafana datasources
echo "üìà Configurando Grafana..."
mkdir -p grafana/datasources
cat > grafana/datasources/prometheus.yml << 'EOL'
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
    editable: true
EOL

# Detener contenedores existentes si est√°n corriendo
echo "üõë Deteniendo contenedores existentes..."
$COMPOSE_CMD down

# Construir im√°genes actualizadas
echo "üî® Construyendo im√°genes Docker..."
$COMPOSE_CMD build --no-cache

# Iniciar servicios base primero
echo "üöÄ Iniciando servicios base (PostgreSQL, Redis)..."
$COMPOSE_CMD up -d postgres redis

# Esperar a que la base de datos est√© lista
echo "‚è≥ Esperando a que PostgreSQL est√© listo..."
sleep 10

# Verificar conectividad de PostgreSQL
max_attempts=30
attempt=1
while [ $attempt -le $max_attempts ]; do
    if docker exec ia-agents-postgres pg_isready -U ia_user -d ia_agents &> /dev/null; then
        echo "‚úÖ PostgreSQL est√° listo"
        break
    fi
    
    if [ $attempt -eq $max_attempts ]; then
        echo "‚ùå Error: PostgreSQL no respondi√≥ despu√©s de $max_attempts intentos"
        exit 1
    fi
    
    echo "  Intento $attempt/$max_attempts - Esperando PostgreSQL..."
    sleep 2
    ((attempt++))
done

# Iniciar el resto de servicios
echo "üöÄ Iniciando todos los servicios..."
$COMPOSE_CMD up -d

# Esperar a que la API est√© lista
echo "‚è≥ Esperando a que la API est√© lista..."
sleep 5

max_attempts=30
attempt=1
while [ $attempt -le $max_attempts ]; do
    if curl -f http://localhost:8000/api/health &> /dev/null; then
        echo "‚úÖ API est√° lista"
        break
    fi
    
    if [ $attempt -eq $max_attempts ]; then
        echo "‚ö†Ô∏è API no respondi√≥ despu√©s de $max_attempts intentos, pero continuando..."
        break
    fi
    
    echo "  Intento $attempt/$max_attempts - Esperando API..."
    sleep 2
    ((attempt++))
done

# Verificar estado de todos los contenedores
echo ""
echo "üìã Estado de contenedores:"
echo "--------------------------"
$COMPOSE_CMD ps

echo ""
echo "üéâ Sistema iniciado exitosamente!"
echo ""
echo "üìç URLs importantes:"
echo "   ‚Ä¢ API:           http://localhost:8000"
echo "   ‚Ä¢ Documentaci√≥n: http://localhost:8000/docs"
echo "   ‚Ä¢ n8n:           http://localhost:5678 (admin/n8n_password)"
echo "   ‚Ä¢ Jupyter:       http://localhost:8888 (token: jupyter_token_123)"
echo "   ‚Ä¢ Grafana:       http://localhost:3000 (admin/grafana_admin)"
echo "   ‚Ä¢ Prometheus:    http://localhost:9090"
echo ""
echo "üîß Comandos √∫tiles:"
echo "   ‚Ä¢ Ver logs API:    docker logs ia-agents-api -f"
echo "   ‚Ä¢ Parar sistema:   docker-compose down"
echo "   ‚Ä¢ Ejecutar tests:  python test_docker_system.py"
echo ""
echo "‚ö†Ô∏è IMPORTANTE:"
echo "   ‚Ä¢ Configura tus API keys de Binance en el archivo .env"
echo "   ‚Ä¢ Por defecto est√° en modo TESTNET (seguro para pruebas)"
echo "   ‚Ä¢ Cambia TRADING_ENABLED=true solo cuando est√©s listo para trading real"
echo ""

# Ofrecer ejecutar tests autom√°ticamente
read -p "¬øDeseas ejecutar las pruebas automatizadas ahora? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üß™ Ejecutando pruebas automatizadas..."
    python test_docker_system.py
fi

echo "‚úÖ ¬°Sistema IA-AGENTS listo para usar!"
